@model ParvazPardaz.ViewModel.EditPostViewModel

@{
    ViewBag.Title = "Edit";
}

<link href="~/Plugins/KendoDateTimePicker/Kendo.default.min.css" rel="stylesheet" />
<link href="~/Plugins/KendoDateTimePicker/Kendo.common.min.css" rel="stylesheet" />

<link href="~/Content/kendo/2014.3.1314/kendo.common-material.min.css" rel="stylesheet" />

<link href="~/Content/kendo/2014.3.1314/kendo.material.min.css" rel="stylesheet" />
<link href="~/Content/kendo/2014.3.1314/kendo.material.mobile.min.css" rel="stylesheet" />
<link href="~/Content/kendo/2014.3.1314/kendo.rtl.min.css" rel="stylesheet" />
<style>
    .k-checkbox, .k-radio {
        display: inline;
        opacity: 1 !important;
        width: 6px !important;
        margin: 6px !important;
    }
</style>
@*<link rel="stylesheet" href="~/Plugins/bootstrap-datepicker/bootstrap-datepicker.min.css" />*@
<style>
    html, body {
        overflow-x: hidden;
    }
</style>
@using (Html.BeginForm("Edit", "Post", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal col-md-9">
        <h3>@ParvazPardaz.Resource.EShop.EShopResource.PostManagement</h3>
        <hr />
        @Html.HiddenFor(model => model.Id)

        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <div class="editor-label col-md-2">
                        @*@ParvazPardaz.Model.ParvazPardazResource.core.coreResource.Roles*@
                        گروه
                    </div>
                    <div class="editor-field col-md-10">
                        @Html.ListBoxFor(model => model._selectedPostGroups, new MultiSelectList(Model._postGroups, "Id", "Name"),
  new { @class = "form-control search-select select", data_placehoder = "کروه را انتخاب کنید" })
                        @Html.ValidationMessageFor(model => model._selectedPostGroups)
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.LinkTableTitle, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.LinkTableTitle, new { @class = "form-control", style = "direction:ltr" })
                <div class="alert alert-info" style="margin-top:10px">
                    <i class="fa fa-info-circle"></i>
                    <strong>توجه!</strong>
                    <p>@ParvazPardaz.Resource.Link.LinkResource.UseThisLinkTableTitlePattern</p>
                    <p style="direction:ltr">@ParvazPardaz.Resource.Link.LinkResource.LinkTableTitlePattern</p>
                </div>
                @Html.ValidationMessageFor(model => model.LinkTableTitle, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.PostSummery, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.PostSummery, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PostSummery, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PostContent, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PostContent, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PostContent, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MetaKeywords, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.MetaKeywords, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MetaKeywords, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MetaDescription, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.MetaDescription, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MetaDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PublishDatetime, new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.PublishDatetime, "{0:yyyy/MM/dd}", new { @class = "form-control datepicker" })
                @Html.ValidationMessageFor(model => model.PublishDatetime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpireDatetime, new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.ExpireDatetime, "{0:yyyy/MM/dd}", new { @class = "form-control datepicker" })
                @Html.ValidationMessageFor(model => model.ExpireDatetime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PostSort, new { @class = "control-label col-md-2" })
            <div class="col-md-3 number">
                @Html.EditorFor(model => model.PostSort, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PostSort, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.CheckBoxFor(model => model.IsActive, new { @class = "flat-red", style = "margin-right:50px; margin-left:50px;" })
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IsActiveComments, new { @class = "control-label col-md-2" })
            <div class="col-md-3">

                @Html.CheckBoxFor(model => model.IsActiveComments, new { @class = "flat-red", style = "margin-right:50px; margin-left:50px;" })
                @Html.ValidationMessageFor(model => model.IsActiveComments, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.AccessLevel, new { @class = "control-label col-md-2" })
            <div class="col-md-3">

                @Html.EnumDropDownListFor(model => model.AccessLevel, new { @class = "form-control search-select select" })
                @Html.ValidationMessageFor(model => model.AccessLevel, "", new { @class = "text-danger" })
            </div>
        </div>
        @*<div class="form-group">
                @Html.Label(ParvazPardaz.Resource.General.Generals.Upload, new { @class = "control-label col-md-1" })
                <div class="col-md-10">
                    @Html.FileUploaderFor(model => model.File).Captions(ParvazPardaz.Resource.Tour.Tours.SelectPic).AddMore(false).IsMultiple(false).ItemAppendToEnd(false).RemoveConfirmation(true).ShowThumbs(true).RemoveButton(true).RemoveButtonInEditMode(false).Edit(new List<EditModeFileUpload>() { new EditModeFileUpload() { Name = Model.ImageFileName, Size = Model.ImageSize, Type = Model.ImageExtension, Url = Model.ImageUrl } })
                    @Html.ValidationMessageFor(model => model.File, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <!-- کلیدواژه های کالا -->
        <div class="panel panel-default">
            <div class="panel-heading">
                <i class="fa fa-external-link-square"></i>
                کلیدواژه ها
                <div class="panel-tools">
                    <a class="btn btn-xs btn-link panel-collapse collapses" href="#">
                    </a>
                </div>
            </div>
            <div class="panel-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.TagTitles, new { @class = "control-label col-md-2" })
                    <div class="col-md-9">
                        @Html.ListBoxFor(model => model.TagTitles, Model.KeywordsDDL, new { @class = "form-control  TagTitles" })
                        @Html.ValidationMessageFor(model => model.TagTitles, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-1 col-md-11">

                <input type="submit" value=@ParvazPardaz.Resource.General.Generals.Edit class="btn btn-custom green" />
                @Html.ActionLink(ParvazPardaz.Resource.General.Generals.Back, "Index", null, new { @class = "btn btn-custom red" })
            </div>
        </div>

    </div>
    <div class="col-md-3">
        <div class="form-group">
            <div class="editor-label col-md-12">
                @ParvazPardaz.Resource.EShop.EShopResource.PostGroup

            </div>
            @*<div class="editor-field col-md-12">
                    @Html.ListBoxFor(model => model._selectedPostGroups, new MultiSelectList(Model._postGroups, "Id", "Name"),
                            new { @class = "form-control search-select select", data_placehoder = "کروه را انتخاب کنید" })
                    @Html.ValidationMessageFor(model => model._selectedPostGroups)

                </div>*@
            <div class="col-md-12">
                @(Html.Kendo()
                    .TreeView()
                    .DragAndDrop(false)
    .Name("treeview")
    .Events(events => events
                    .Check("onCheck")
        //.DataBound("OnLoad")
                )

                    .HtmlAttributes(new { @class = "tree-section" })
                    .DataTextField("NodeText")
            .TemplateId("treeview-template")
        //.Events(ev => ev.Select("onSelectedNode"))
                    .DataSource(ds =>
                    {
                        ds.Read(read => read.Action(actionName: "GetMenuItems", controllerName: "Post").Data("Parameterfn"));
                        ds.Model(model => model
                            .Id("Id")
                            .HasChildren("Haschildren")
                             );
                    })

                )
                @*<div style="padding-top: 2em;">
                        <h4>Status</h4>
                        <p id="result">No nodes checked.</p>
                    </div>*@
                @*<div id="hidden-rs">
                        @{var count = 0;}
                        @foreach (var item in Model._selectedPostGroups)
                        {

                            var name = "_selectedPostGroups[" + count + "]";
                            <input type="hidden" name="@name" value="@item" />
                            count++;
                        }
                    </div>*@

            </div>
            @*<div class="demo-section k-content">
                    <div>
                        <h4>Check nodes</h4>
                        @(Html.Kendo().TreeView()
                        .Name("treeview")
                        .Checkboxes(checkboxes => checkboxes
                            .Name("checkedFiles")
                            .CheckChildren(true)
                        )
                         .Events(events => events
                            .Check("onCheck")
                        )
                        .Items(treeview =>
                        {
                            treeview.Add().Text("My Documents").Id("1")
                                .SpriteCssClasses("rootfolder")
                                .Expanded(true)
                                .Items(root =>
                                {
                                    root.Add().Text("Kendo UI Project").Id("2")
                                        .Expanded(true)
                                        .SpriteCssClasses("folder")
                                        .Items(project =>
                                        {
                                            project.Add().Text("about.html").Id("3").SpriteCssClasses("html");
                                            project.Add().Text("index.html").Id("4").SpriteCssClasses("html");
                                            project.Add().Text("logo.png").Id("5").SpriteCssClasses("image");
                                        });

                                    root.Add().Text("New Web Site").Id("6")
                                        .Expanded(true)
                                        .SpriteCssClasses("folder")
                                        .Items(item =>
                                        {
                                            item.Add().Text("mockup.jpg").Id("7").SpriteCssClasses("image");
                                            item.Add().Text("Research.pdf").Id("8").SpriteCssClasses("pdf");
                                        });

                                    root.Add().Text("Reports").Id("9")
                                        .Expanded(true)
                                        .SpriteCssClasses("folder")
                                        .Items(reports =>
                                        {
                                            reports.Add().Text("February.pdf").Id("10").SpriteCssClasses("pdf");
                                            reports.Add().Text("March.pdf").Id("11").SpriteCssClasses("pdf");
                                            reports.Add().Text("April.pdf").Id("12").SpriteCssClasses("pdf");
                                        });
                                });
                        })
                        )
                    </div>
                    <div style="padding-top: 2em;">
                        <h4>Status</h4>
                        <p id="result">No nodes checked.</p>
                    </div>
                </div>*@
        </div>
    </div>
}
@section scripts{
    <script src="~/Scripts/kendo.date/JalaliDate.js"></script>
    <script src="~/Scripts/kendo.date/kendo.web.js"></script>
    <script src="~/Scripts/kendo.date/fa-IR.js"></script>

    <script type="text/javascript">
        var $ = jQuery.noConflict();
        $(document).ready(function () {
            $(".datepicker").kendoDatePicker();
        });

    </script>
    @*<script src="~/Plugins/bootstrap-datepicker/calendar.js"></script>
        <script type="text/javascript" src="~/Plugins/bootstrap-datepicker/jquery-ui-sliderAccess.js"></script>


        <script type="text/javascript" src="~/Plugins/bootstrap-datepicker/bootstrap-datepicker.min.js"></script>
        <script src="~/Plugins/bootstrap-datepicker/bootstrap-datepicker.fa.min.js"></script>
        <script type="text/javascript" src="~/Plugins/bootstrap-datepicker/jquery-ui-timepicker-addon.js"></script>
        <script type="text/javascript">
                var $ = jQuery.noConflict();
                $(document).ready(function () {
                    $(".datepicker").datepicker({
                        showOtherMonths: true,
                        selectOtherMonths: true,
                        changeMonth: true,
                        changeYear: true,
                        regional: 'fa',
                        dateFormat: "yy/mm/dd"
                    });
                });
        </script>*@
    <script type="text/javascript">
        $('.select').select2({
            dir: "RTL"
        });

        $(document).ready(function () {
            var $selectMulti = $(".TagTitles").select2({
                tags: true,
                multiple: true,
                tokenSeparators: [',', '+'],
                dir: "RTL",
                placeholder: "کلیدواژه ها را انتخاب نمایید",

            })

            //
            var isFirstLoad = $("#isfirst").val();
            if (isFirstLoad == "true") {
                $selectMulti.val(null).trigger("change");
            }
        })

        //$(".btn-submit").on("click", function (e) {

        //    debugger;
        //    var tagList = [];
        //    $('#TagTitles :selected').each(function (i, selected) {
        //        tagList[i] = $(selected).text();
        //    });

        //    $.ajax({
        //        type: "POST",
        //        url: "/Admin/Post/SaveTags",
        //        data: {
        //            tags: tagList
        //        },
        //        success: function (data) {
        //            return true;
        //        },
        //        error: function (textStatus, errorThrown) {
        //            return false;
        //        }
        //    });

        //})
    </script>
    <script>
        var checked = [];
        // function that gathers IDs of checked nodes
        function checkedNodeIds(nodes, checkedNodes) {
            for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].checked) {
                    checkedNodes.push(nodes[i].id);
                }

                if (nodes[i].hasChildren) {
                    checkedNodeIds(nodes[i].children.view(), checkedNodes);
                }
            }
        }

        // show checked node IDs on datasource change
        function onCheck() {
            var checkedNodes = [],
                treeView = $("#treeview").data("kendoTreeView"),
                message;

            checkedNodeIds(treeView.dataSource.view(), checkedNodes);

            if (checkedNodes.length > 0) {
                message = "IDs of checked nodes: " + checkedNodes.join(",");
            } else {
                message = "No nodes checked.";
            }

            $("#result").html(message);

            //for (var i = 0; i < checkedNodes.length; i++) { checked[i] = parseInt(checkedNodes[i], 10); }
            //$('.selectedPostGroup').val('sss');

            //remove hidden node
            var myNode = document.getElementById("hidden-rs");
            while (myNode.firstChild) {
                myNode.removeChild(myNode.firstChild);
            }
            //add hidden node
            for (var i = 0; i < checkedNodes.length; i++) {
                var input = document.createElement("input");

                input.setAttribute("type", "hidden");

                input.setAttribute("name", "_selectedPostGroups[" + i + "]");

                input.setAttribute("value", parseInt(checkedNodes[i], 10));

                //append to form element that you want .
                document.getElementById("hidden-rs").appendChild(input);
            }


        }
        function OnLoad() {
            this.expand('.k-item');
        }
    </script>


    <script>
        function Parameterfn(e) {
            return {
                Id: e.Id,
                //MenugroupId:@(ViewBag.GroupId)
            };
        }
    </script>
    <script type="text/javascript">
        var treeview;
        //var $ = jQuery.noConflict();
        function onSelectedNode(e) {
            $("#chkroot").prop("checked", false);
            var nodeId = treeview.dataItem(e.node).Id;
            $("#hdnGroupId").val(nodeId);
            //Hiding menu type element
            document.getElementById('MenuTypeDiv').style.display = 'none';
            var a = document.getElementById("MenuType");
            a.value = "Type_0";
        }
        $(document).ready(function () {
            treeview = $("#tree").data("kendoTreeView");
            $("#chkroot").change(function () {
                if ($(this).prop('checked') == true) {
                    $("#hdnGroupId").val(null);
                    //display menu type element
                    document.getElementById('MenuTypeDiv').style.display = 'block';
                }
            });
        });
        //function IsRootCheck() {
        //    if (document.getElementById('MenuType').checked) {
        //        //display menu type element
        //        document.getElementById('MenuTypeDiv').style.display = 'block';
        //    }
        //    else{
        //        //hiding menu type element
        //        document.getElementById('MenuTypeDiv').style.display = 'none';
        //        var a = document.getElementById("MenuType");
        //        a.value = "Type_0";
        //    }
        //}
    </script>
    @*<script>
            jQuery(function () {
                jQuery("#treeview")
                    .kendoTreeView({
                        "check": onCheck,
                        "dataSource": {
                            "transport": { "read": { "url": "/Admin/Post/GetMenuItems", "data": Parameterfn } },
                            "schema": { "model": { "id": "Id", "hasChildren": "Haschildren" } }
                        }, "template": jQuery('#treeview-template').html(),
                        "checkboxes": {
                            "name": "checkedFiles",
                            "template": "\u003cinput type=\u0027checkbox\u0027 name=\u0027#= treeview.checkboxes.name #\u0027 #= item.checked ? \u0027checked\u0027 : \u0027\u0027 # value=\u0027#= item.id #\u0027 /\u003e",
                            "checkChildren": true
                        },
                        "dataTextField": "NodeText"
                    });
            });
        </script>*@
    <script type="text/javascript">
        //var kd = jQuery.noConflict();
        $(document).ready(function () {
            $('#PostSummery').jqEasyCounter({
                'maxChars': 400,
                'maxCharsWarning': 500
            });
        });
    </script>
}
