<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#    
    var controllerName = ViewDataTypeName.Split('.').Last();
    if(controllerName.StartsWith("Grid") && controllerName.EndsWith("ViewModel"))
    {
        controllerName = controllerName.Substring(4, controllerName.Length - 13);
    }
#>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>
<#
} else if(IsLayoutPageSelected) {
#>
@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}
<#
} else {
#>
@{
    Layout = null;
}
<#
    PushIndent("    ");
}
#>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<link href="https://cdn.datatables.net/1.10.15/css/dataTables.bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.datatables.net/responsive/2.1.1/css/responsive.bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.datatables.net/1.10.15/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.10.15/js/dataTables.bootstrap4.min.js"></script>
<table id="grid" class="table table-striped table-bordered dt-responsive">
    <thead>
        <tr>  
            <th></th>          
<#
var pkName = GetPrimaryKeyName();
if (pkName != null) {
#>
            <th>@Html.DisplayNameFor(model => model.<#= pkName #>)</th>
<#
} else {
#>       
<#
}
IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {#>
<# if (property.IsAssociation && GetRelatedModelMetadata(property) == null) { continue; }#>  <#
    }
}
#>
<#
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        // This is a temporary work around until core scaffolding provides support for independent associations.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
        if(property.TypeName.ToString().Equals("System.Nullable<System.DateTime>") || property.TypeName.ToString().Equals("System.DateTime")){
#>
            <th>@Html.DisplayNameFor(model => model.<#= GetValueExpression(property) #>)</th>
<#
        }else{
#>
            <th>@Html.DisplayNameFor(model => model.<#= GetValueExpression(property) #>)</th>
<#
        }
    }
}
#>
        </tr>
    </thead>   
</table>
<script>
    $(document).ready(function () {
        var table = $("#grid").DataTable({
            "processing": true, // for show progress bar
            "serverSide": true, // for process server side
            "filter": true, // this is for disable filter (search box)
            "orderMulti": false, // for disable multiple column at once
            'select': true,
            "ajax": {
                "url": "/Admin/<#= controllerName #>/Get<#= controllerName #>Table",
                "type": "POST",
                "datatype": "json"
            },
            "columnDefs":
            [{
                "targets": [1],
                "visible": false,
                "searchable": false
            }]
            ,"columns": [                            
<#
properties = ModelMetadata.Properties;
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {#>
<# if (property.IsAssociation && GetRelatedModelMetadata(property) == null) { continue; }#>  <#
    }
}
#>
<#
pkName = GetPrimaryKeyName();
if (pkName != null) {
#>
            { "data": "<#= pkName #>", name: "<#= pkName #>", "autoWidth": true },
<#
} else {
#>       
<#
}
foreach (PropertyMetadata property in properties) {
    
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        // This is a temporary work around until core scaffolding provides support for independent associations.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
        if(property.TypeName.ToString().Equals("System.Nullable<System.DateTime>") || property.TypeName.ToString().Equals("System.DateTime")){
#>
            { "data": "<#= GetValueExpression(property) #>", name: "<#= GetValueExpression(property) #>", "autoWidth": true, render: function (data, type, row) { return (data != null ? moment(data).format('jYYYY/jMM/jDD HH:mm') : ''); } },
<#                
        }else if(property.TypeName.ToString().Equals("System.Nullable<System.Boolean>") || property.TypeName.ToString().Equals("System.Boolean")){
#>
            { "data": "<#= GetValueExpression(property) #>", name: "<#= GetValueExpression(property) #>", "autoWidth": true, render: function (data, type, row) { return (data != true ? '✘' : '✔'); } },
<#                
        }else{
#>
            { "data": "<#= GetValueExpression(property) #>", name: "<#= GetValueExpression(property) #>", "autoWidth": true },
<#
        }
    }
}
#>
            ],
            "order": [[2, 'asc']]
        });
        // Add event listener for opening and closing details
        $('#grid tbody').on('click', 'td.details-control', function () {
            var tr = $(this).closest('tr');
            var row = table.row(tr);

            if (row.child.isShown()) {
                // This row is already open - close it
                row.child.hide();
                tr.removeClass('shown');
            }
            else {
                row.child(format(row.data())).show();
                tr.addClass('shown');
                // Open this row
            }
        });
    });
    function format(rowData) {
        @*
        var div = $('<div/>')
            .addClass('loading')
            .text('در حال واکشی اطلاعات . . .');
        $.ajax({
            url: '/Admin/<#= controllerName #>/GetRelatedInfo',
            data: {
                Id: rowData.OrderId
            },
            dataType: 'html',
            success: function (result) {
                div.html(result).removeClass('loading');
            }
        });
        return div
        *@
    }
</script>

<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>

<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
